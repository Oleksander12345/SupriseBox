const express = require('express');
const router = express.Router();
const Stripe = require('stripe');
const stripe = Stripe(process.env.STRIPE_SECRET_KEY);
const Order = require("../models/Order");

router.post('/create-intent', async (req, res) => {
  const { amount } = req.body;
  console.log("üí∞ Received amount:", amount); // üëâ –ø–µ—Ä–µ–≤—ñ—Ä –∑–Ω–∞—á–µ–Ω–Ω—è

  try {
    if (!amount || amount <= 0) {
      return res.status(400).json({ error: "Invalid amount" });
    }

    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(amount * 100), // —É —Ü–µ–Ω—Ç–∞—Ö!
      currency: "usd",  
      automatic_payment_methods: { enabled: true },
    });
    
    console.log("‚úÖ Created intent:", paymentIntent.id);
    res.json({ clientSecret: paymentIntent.client_secret });
  } catch (err) {
    console.error("‚ùå Stripe error:", err);
    res.status(500).json({ error: err.message });
  }
});
router.post("/payment-success", async (req, res) => {
  try {
    const { orderId } = req.body;

    // 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    // 2. –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order.isPaid = true;
    order.paidAt = new Date();
    await order.save();

    res.status(200).json({
      message: "Order paid successfull",
    });
  } catch (err) {
    console.error("‚ùå payment-success error:", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

module.exports = router;